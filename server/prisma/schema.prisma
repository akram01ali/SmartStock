generator client {
  provider             = "prisma-client-py"
  interface            = "asyncio"
  recursive_type_depth = -1
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Measures {
  centimeters
  meters
  amount
}

enum TypeOfComponent {
  printer
  group
  assembly
  component
}

enum ReservationStatus {
  pending
  confirmed
  in_progress
  completed
  cancelled
}

model Components {
  componentName         String @unique
  amount                Float
  measure               Measures
  lastScanned           DateTime @default(now())
  scannedBy             String
  durationOfDevelopment Float
  triggerMinAmount      Float
  supplier              String
  cost                  Float
  type                  TypeOfComponent
  description           String?
  image                 String?
  delivery_time         Float?
  
  @@index([type])
  @@index([lastScanned])
  @@index([amount])
}

model ComponentHistory {
  componentName         String
  amount                Float
  scanned               DateTime
  scannedBy             String

  @@unique([componentName, amount, scanned, scannedBy])
}

model Relationships {
  topComponent        String
  subComponent        String
  amount              Float

  @@unique([topComponent, subComponent])
}

model Users {
  username            String @unique
  password            String
}

model AppUser {
  name        String
  surname     String
  initials    String
  password    String

  @@unique([name, surname])
}

model Reservations {
  id                String
  isRoot            Boolean @default(false)
  level             Int @default(0)
  title             String
  componentName     String
  quantity          Float
  priority          Int
  requestedBy       String
  neededByDate      DateTime?
  status            ReservationStatus @default(pending)
  createdAt         DateTime @default(now())
  
  @@id([id, componentName])
  @@index([priority, neededByDate])
  @@index([componentName, status])
  @@index([isRoot])
  @@index([level])
}

model ReservationAllocations {
  reservationId     String
  componentName     String
  allocatedQuantity Float
  shortfallQuantity Float @default(0)
  allocationOrder   Int
  
  @@id([reservationId, componentName])
  @@index([componentName, allocationOrder])
  @@index([shortfallQuantity])
}

model PurchaseRequirements {
  id               String @id @default(cuid())
  componentName    String
  requiredQuantity Float
  neededByDate     DateTime
  status           String @default("pending")
  createdAt        DateTime @default(now())
  
  @@index([componentName, status])
  @@index([neededByDate])
}